#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    Constraint

    A constraint defines a virtual geometry in which a body's centroid must
    reside inside of, as well as a virtual arc that acts as a body's rotation
    limit set.

    Author: Abdul Rahman Dabbour
    Affiliation: CogRobo Lab, FENS, Sabanci University
    License: GNU Affero General Public License v3.0
    Repository: https://github.com/ardabbour/rearrangement/
"""

import uuid

from rearrangement.errors import type_error


class Constraint(object):
    """
    Defines a constraint.

    Parameters
    ----------
    shape : str
        the shape of the constraint:-
        'recatangular',
        'circular', or
        'rotational'.
    geometry : dict
        geometry of the constraint:-
        'max x', 'max y', 'min x', and 'min y' for 'rectangular',
        'center' and 'radius' for 'circular', or
        'min' and 'max' values for 'rotational'.

    Attributes
    ----------
    oid : UUID
        the UUID of the constraint; generated by uuid1.
    shape : str
        the shape of the constraint:-
        'recatangular',
        'circular', or
        'rotational'.
    geometry : dict
        geometry of the constraint:-
        'max x', 'max y', 'min x', and 'min y' for 'rectangular',
        'center' and 'radius' for 'circular', or
        'min' and 'max' values for 'rotational'.
    """

    def __init__(self, shape, geometry):
        self.oid = uuid.uuid1()
        self.shape = shape
        self.geometry = geometry

    @property
    def oid(self):
        return self.__oid

    @oid.setter
    def oid(self, oid):
        if isinstance(oid, uuid.UUID):
            self.__oid = oid
        else:
            raise type_error("oid", uuid.UUID, type(oid))

    @property
    def shape(self):
        return self.__shape

    @shape.setter
    def shape(self, shape):
        self.__shape = shape

    @property
    def geometry(self):
        return self.__geometry

    @geometry.setter
    def geometry(self, geometry):
        self.__geometry = geometry
